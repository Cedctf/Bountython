import OpenAI from 'openai';
// Load environment variables
import dotenv from 'dotenv';
dotenv.config();

// Initialize OpenAI client with API key from environment variables
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { proposal } = req.body;
    
    if (!proposal || proposal.trim() === '') {
      return res.status(400).json({ error: 'Proposal text is required' });
    }

    // Verify API key is available
    if (!process.env.OPENAI_API_KEY) {
      console.error('API key is missing');
      return res.status(500).json({ 
        error: 'API key is missing. Please set OPENAI_API_KEY in your environment variables.',
        // Add fallback data for testing when API key is missing
        fallback: {
          summary: "This is a fallback summary since the OpenAI API key is missing. In a real environment, this would be generated by GPT-4.",
          impact: [
            "This is a fallback impact point 1",
            "This is a fallback impact point 2",
            "This is a fallback impact point 3"
          ],
          recommendations: [
            {
              title: "Fallback Recommendation 1",
              description: "This is a fallback recommendation description. In a real environment, this would be generated by GPT-4."
            },
            {
              title: "Fallback Recommendation 2",
              description: "This is a fallback recommendation description. In a real environment, this would be generated by GPT-4."
            }
          ],
          sentiment: "Neutral"
        }
      });
    }

    console.log('Analyzing proposal with OpenAI API:', proposal.substring(0, 50) + '...');

    // Call OpenAI API to analyze the proposal
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: `You are an AI governance proposal analyzer for DAOs. 
          Analyze the governance proposal provided and return insights in JSON format with the following structure:
          {
            "summary": "A 2-3 paragraph summary of the proposal",
            "impact": ["Point 1 about potential impact", "Point 2 about potential impact", "Point 3 about potential impact"],
            "recommendations": [
              {"title": "Recommendation 1", "description": "Detailed explanation of recommendation 1"},
              {"title": "Recommendation 2", "description": "Detailed explanation of recommendation 2"},
              {"title": "Recommendation 3", "description": "Detailed explanation of recommendation 3"}
            ],
            "sentiment": "Positive, Negative, Neutral, or Mixed"
          }
          
          Always return data in the exact format above. The sentiment must be one of the exact values: "Positive", "Negative", "Neutral", or "Mixed".
          All fields are required - do not omit any fields.
          Provide thoughtful, detailed analysis.`
        },
        {
          role: "user",
          content: `Analyze this DAO governance proposal: "${proposal}"`
        }
      ],
      temperature: 0.7,
      response_format: { type: "json_object" }
    });

    // Parse the response
    const analysisText = response.choices[0].message.content;
    console.log('Raw response from OpenAI:', analysisText);
    
    let analysis;
    try {
      analysis = JSON.parse(analysisText);
    } catch (parseError) {
      console.error('Error parsing OpenAI response:', parseError);
      return res.status(500).json({ 
        error: 'Error parsing AI response',
        details: parseError.message,
        rawResponse: analysisText
      });
    }

    // Validate the response structure
    if (!analysis.summary || !analysis.impact || !analysis.recommendations || !analysis.sentiment) {
      console.error('Invalid response structure from OpenAI:', analysis);
      
      // Create a valid response with default values for missing fields
      const validatedAnalysis = {
        summary: analysis.summary || "No summary was generated by the AI.",
        impact: Array.isArray(analysis.impact) ? analysis.impact : ["No impact details were generated."],
        recommendations: Array.isArray(analysis.recommendations) ? analysis.recommendations : [
          { 
            title: "No Recommendations", 
            description: "No recommendations were generated by the AI." 
          }
        ],
        sentiment: analysis.sentiment || "Neutral"
      };
      
      return res.status(200).json(validatedAnalysis);
    }

    return res.status(200).json(analysis);
  } catch (error) {
    console.error('Error analyzing proposal:', error);
    return res.status(500).json({ 
      error: 'Error analyzing proposal',
      details: error.message,
      // Provide a fallback response for when the API call fails
      fallback: {
        summary: "Unable to generate analysis at this time. Please try again later.",
        impact: ["API request failed, impact analysis not available."],
        recommendations: [
          { 
            title: "Try Again Later", 
            description: "The AI service is currently unavailable. Please try submitting your proposal again in a few minutes." 
          }
        ],
        sentiment: "Neutral"
      }
    });
  }
} 